{"version":3,"sources":["assets sync /^/.*/.jpg$","assets/Clear.jpg","assets/Clouds.jpg","assets/Fog.jpg","assets/Snow.jpg","assets/Thunderstorm.jpg","assets/cold.jpg","assets/rainy2.jpg","assets/sunny1.jpg","assets/warm.jpg","assets/sunny2.jpeg","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","api","App","useState","query","setQuery","weather","setWeather","time","Date","getHours","timezone","getMinutes","getSeconds","style","main","backgroundImage","require","backgroundSize","transition","className","type","placeholder","onChange","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sJAAA,IAAIA,EAAM,CACT,cAAe,GACf,eAAgB,GAChB,YAAa,GACb,aAAc,GACd,qBAAsB,GACtB,aAAc,GACd,eAAgB,GAChB,eAAgB,GAChB,aAAc,IAIf,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBC9BpBU,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,+ECIrCC,G,KACG,oCADHA,EAEI,2CA2FKC,MAxFf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAEJG,EAFI,KAEKC,EAFL,KAiCPC,EAAI,WAAM,IAAIC,MAAOC,YAAcJ,EAAQK,SAAW,KAAO,GAAzD,aAA+D,IAAIF,MAAOG,aAA1E,mCACU,IAAIH,MAAOI,cAC7B,OACI,yBAAKC,MAC0B,oBAAhBR,EAAQS,KACf,CACGC,gBAAe,cAAUC,MAAQ,YAAYX,EAAQA,QAAQ,GAAGS,KAAhC,SAAjB,KACZG,eAAgB,YAEpBC,WAAY,YAAc,CACvBH,gBAAgB,OAAD,OAASC,EAAQ,IAAjB,KACdC,eAAgB,YAEpBC,WAAY,aAMxB,8BACE,yBAAKC,UAAU,cAEZ,2BAAOC,KAAK,OAAOD,UAAU,aAAaE,YAAY,sBAAsBC,SAC1E,SAAA9B,GAAC,OAAIY,EAASZ,EAAE+B,OAAOC,QACvBA,MAAOrB,EAAOsB,WAtDR,SAAAC,GACO,UAAdA,EAAMC,KACNC,MAAM,GAAD,OAAI5B,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACrD6B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF1B,EAAW0B,GACX5B,EAAS,IACT6B,QAAQC,IAAI,YAAcF,UAmDX,oBAAjB3B,EAAQS,KACxB,6BAEM,yBAAKK,UAAU,gBAEX,yBAAKA,UAAU,YAAYd,EAAQ8B,KAAnC,KAA2C9B,EAAQ+B,IAAIC,SACvD,yBAAKlB,UAAU,QAnDH,SAACmB,GACjB,IAIIC,EADO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAClE,SAAU,YAAa,UAAW,WAAY,YAK/BL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyCPE,CAAY,IAAIvC,MAAQ,6BAC9CD,IAIL,yBAAKY,UAAU,eACT,yBAAKA,UAAU,QACd6B,KAAKC,MAAM5C,EAAQS,KAAKoC,MADzB,SAIA,yBAAK/B,UAAU,WACVd,EAAQA,QAAQ,GAAGS,QAIzB,MC/EOqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.0221b9f6.chunk.js","sourcesContent":["var map = {\n\t\"./Clear.jpg\": 11,\n\t\"./Clouds.jpg\": 12,\n\t\"./Fog.jpg\": 13,\n\t\"./Snow.jpg\": 14,\n\t\"./Thunderstorm.jpg\": 15,\n\t\"./cold.jpg\": 16,\n\t\"./rainy2.jpg\": 17,\n\t\"./sunny1.jpg\": 18,\n\t\"./warm.jpg\": 19\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 10;","module.exports = __webpack_public_path__ + \"static/media/Clear.4f31ae01.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Clouds.9e9338dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Fog.29ae0058.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Snow.492c3271.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm.c84d082e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cold.590a1eeb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainy2.01525709.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny1.ef1ab747.jpg\";","module.exports = __webpack_public_path__ + \"static/media/warm.dcfdfb4e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny2.a4cd1854.jpeg\";","import React, { useState } from 'react';\n\n// import './App.css';\nimport './index.css';\nconst api = {\n    key: \"71a57ec7b60326f52b7127fd16f19870\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    const search = event => {\n        if (event.key === \"Enter\") {\n            fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n                .then(res => res.json())\n                .then(result => {\n                    setWeather(result)\n                    setQuery('');\n                    console.log(\"result : \" , result)\n                })\n\n\n        }\n    }\n    const dateBuilder = (d) => {   \n        let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n            'August', 'September', 'October', 'November', 'December'\n        ];\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n        \n        return `${day} ${date} ${month} ${year}`\n    }\n\n    \n    // code below means : if we return the weather object then => see if the temp > 16 (warm weather )\n    // put the class \"warm\"(it contains the warm image background) other wise if it's less than 16 \n    // set the background to cold image \n    let time = `${new Date().getHours() + (weather.timezone / 3600 - 1)}:${new Date().getMinutes()}:\n                    ${new Date().getSeconds()}`\n    return (\n        <div style={\n               (typeof weather.main != \"undefined\") ?\n                {\n                   backgroundImage : `url(${require(`./assets/${weather.weather[0].main}.jpg`)})`,\n                      backgroundSize :\"100% 100%\",\n  \n                  transition: \"0.4 ease\" }: {\n                     backgroundImage: `url(${require(\"./assets/sunny2.jpeg\")})`,\n                      backgroundSize :\"100% 100%\",\n  \n                  transition: \"0.4 ease\"\n        } \n\n    \n        }> \n        \n      <main>\n        <div className=\"search-box\">\n\n           <input type=\"text\" className=\"search-bar\" placeholder=\"search location ...\" onChange={\n             e => setQuery(e.target.value)\n           } value={query} onKeyPress={search}/>\n\n\n        </div>\n        {(typeof (weather.main) != \"undefined\") ? (\n  <div>\n  \n        <div className=\"location-box\">\n\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}<br/>\n            {time}</div>\n          \n        </div>\n\n        <div className=\"weather-box\">\n              <div className=\"temp\">\n              {Math.round(weather.main.temp)}Â°c\n              </div>\n\n              <div className=\"weather\">\n                  {weather.weather[0].main}\n              </div>\n        </div>\n  </div>\n        ) : ('')}\n      </main>\n    </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}